<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AbaqusExtension</name>
    </assembly>
    <members>
        <member name="F:AbaqusExtension.aAbaqusInputLineTypes.Keyword">
            <summary>
            Abaqus input file keyword
            </summary>
        </member>
        <member name="F:AbaqusExtension.aAbaqusInputLineTypes.DataLine">
            <summary>
            Abaqus Comma or space separated numeric data line
            </summary>
        </member>
        <member name="F:AbaqusExtension.aAbaqusInputLineTypes.Comment">
            <summary>
            Abaqus input file comment line
            </summary>
        </member>
        <member name="F:AbaqusExtension.aAbaqusInputLineTypes.Other">
            <summary>
            Any other input file line other than the above four types
            </summary>
        </member>
        <member name="F:AbaqusExtension.aAbaqusKeywords.Element">
            <summary>
            Abaqus input file *ELEMENT keyword
            </summary>
        </member>
        <member name="F:AbaqusExtension.aAbaqusKeywords.Node">
            <summary>
            Abaqus input file *NODE keyword
            </summary>
        </member>
        <member name="F:AbaqusExtension.aAbaqusKeywords.End">
            <summary>
            Abaqus input file *END keyword
            </summary>
        </member>
        <member name="F:AbaqusExtension.aAbaqusKeywords.Step">
            <summary>
            Abaqus input file *STEP keyword
            </summary>
        </member>
        <member name="F:AbaqusExtension.aAbaqusKeywords.Elset">
            <summary>
            Abaqus input file *ELSET keyword
            </summary>
        </member>
        <member name="F:AbaqusExtension.aAbaqusKeywords.Nset">
            <summary>
            Abaqus input file *NSET keyword
            </summary>
        </member>
        <member name="F:AbaqusExtension.aAbaqusKeywords.Material">
            <summary>
            Abaqus input file *MATERIAL keyword
            </summary>
        </member>
        <member name="F:AbaqusExtension.aAbaqusKeywords.None">
            <summary>
            Indicator state where none of the above keywords are active or a comment line is in progress
            </summary>
        </member>
        <member name="P:AbaqusExtension.aArc.Center">
            <summary>
            Gets or sets the center of the arc in the local coordinates
            </summary>
        </member>
        <member name="P:AbaqusExtension.aArc.Theta_i">
            <summary>
            Gets or sets the smaller CCW angle from +ve X in radians bounding the arc.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aArc.Theta_f">
            <summary>
            Gets or sets the larger CCW angle from +ve X in radians bounding the arc.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aArc.ThirdPt">
            <summary>
            Gets or sets a third point defining the arc together with the start and end.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.IOmanager">
            <summary>
            Gets the file reader and writer of the current assembly.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Is2D">
            <summary>
            Gets whether the model is 2D or 3D.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Materials">
            <summary>
            Gets the collection of the material names.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Tows">
            <summary>
            Gets the list of tows defined in the assembly
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.ElemGroupingLength">
            <summary>
            Gets or sets the length along tow paths over which all elements are given the same orientation.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Nsets">
            <summary>
            Gets the list of node sets in the assembly
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.ModelName">
            <summary>
            Gets or sets the name of the model
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.GENOA_data">
            <summary>
            Gets or sets the array containing GENOA laminate definition
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.NumbOfAxialTows">
            <summary>
            Gets or sets the number of axial tow sections defined
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.GenGENOAdata">
            <summary>
            Tells if GENOA laminate definition file needs to be generated
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Minimum_X">
            <summary>
            Gets or sets the minimum x coordinate in the whole model
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Minimum_Y">
            <summary>
            Gets or sets the minimum y coordinate in the whole model
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Minimum_Z">
            <summary>
            Gets or sets the minimum z coordinate in the whole model
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Maximum_X">
            <summary>
            Gets or sets the maximum x coordinate in the whole model
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Maximum_Y">
            <summary>
            Gets or sets the maximum y coordinate in the whole model
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Maximum_Z">
            <summary>
            Gets or sets the maximum z coordinate in the whole model
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.CoordLimits">
            <summary>
            Gets the matrix holding the minimum and maximum of X,Y and Z coordinates
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Tolerances">
            <summary>
            Gets or sets the tolerance values for PBC generation in X, Y and Z directions
            </summary>
        </member>
        <member name="P:AbaqusExtension.aAssembly.Vectors">
            <summary>
            Gets or sets the vectors for PBC generation in X, Y and Z directions
            </summary>
        </member>
        <member name="M:AbaqusExtension.aAssembly.ApplyPBCs(System.String,AbaqusExtension.aCoordinate,AbaqusExtension.aEquationType[],AbaqusExtension.aPBCtype)">
            <param name="direction">The direction in which the nodes are to be copied</param>
            <param name="sourceValue">The sourceValue of the direction coordinate for the source face</param>
            <param name="vector">The vector in the direction of copy</param>
            <param name="tolerance">The tolerance value to include the required nodes</param>
        </member>
        <member name="M:AbaqusExtension.aAssembly.CopyNodesInX(AbaqusExtension.aEquationType[],AbaqusExtension.aPBCtype)">
            <param name="sourceValue">The sourceValue of the direction coordinate for the source face</param>
            <param name="vectors">The vector in the direction of copy</param>
            <param name="tolerances">The tolerance value to include the required nodes</param>
        </member>
        <member name="M:AbaqusExtension.aAssembly.CopyNodesInY(AbaqusExtension.aEquationType[],AbaqusExtension.aPBCtype)">
            <param name="sourceValue">The sourceValue of the direction coordinate for the source face</param>
            <param name="vectors">The vector in the direction of copy</param>
            <param name="tolerances">The tolerance value to include the required nodes</param>
        </member>
        <member name="M:AbaqusExtension.aAssembly.CopyNodesInZ(AbaqusExtension.aEquationType[],AbaqusExtension.aPBCtype)">
            <param name="sourceValue">The sourceValue of the direction coordinate for the source face</param>
            <param name="vectors">The vector in the direction of copy</param>
            <param name="tolerances">The tolerance value to include the required nodes</param>
        </member>
        <member name="M:AbaqusExtension.aAssembly.GenerateGENOAinput(System.Double[0:,0:])">
            <param name="data">Laminate information for GENOA</param>
        </member>
        <member name="M:AbaqusExtension.aElement.#ctor(System.Int32,AbaqusExtension.aElemTypes,AbaqusExtension.aNode[])">
            <summary>
            Creates an instance of an element with aNode objects
            </summary>
        </member>
        <member name="M:AbaqusExtension.aElement.#ctor(System.Int32,AbaqusExtension.aElemTypes,System.Int32[])">
            <summary>
            Creates an instance of an element from node numbers
            </summary>
        </member>
        <member name="P:AbaqusExtension.aElement.IsCostal">
            <summary>
            True if the element has no neighbour at least at one edge
            </summary>
        </member>
        <member name="P:AbaqusExtension.aElement.IsOriented">
            <summary>
            True if orientation and section has been assigned.
            </summary>
        </member>
        <member name="F:AbaqusExtension.aElementShape.Hex">
            <summary>
            3D brick shape
            </summary>
        </member>
        <member name="F:AbaqusExtension.aElementShape.Wedge">
            <summary>
            3D wedge
            </summary>
        </member>
        <member name="F:AbaqusExtension.aElementShape.Tet">
            <summary>
            3D tetrahedron
            </summary>
        </member>
        <member name="F:AbaqusExtension.aElementShape.Quad">
            <summary>
            2D quadrilateral
            </summary>
        </member>
        <member name="F:AbaqusExtension.aElementShape.Tri">
            <summary>
            2D triangular
            </summary>
        </member>
        <member name="M:AbaqusExtension.aEquationConstraint.#ctor(System.Int32,AbaqusExtension.aPoint,AbaqusExtension.aPoint,AbaqusExtension.aPoint)">
            <param name="constrainedDxn">The direction (x=1, y=2, z=3) in which nodes matched between multiple sets</param>
            <param name="origin">Origin of the coordinate system</param>
            <param name="u">A point in x direction of the coordinate system</param>
            <param name="v">A point in xy plane (except x axis) of the coordinate system</param>
        </member>
        <member name="M:AbaqusExtension.aEquationConstraint.AddTerm(System.Double,AbaqusExtension.aNodeSet,System.Int32)">
            <summary>
            Adds an equation term based on coefficient, node set and degree of freedom
            </summary>
        </member>
        <member name="M:AbaqusExtension.aIO.#ctor(System.String,System.String,AbaqusExtension.aAssembly)">
            <param name="inputFile">The Abaqus input file for the mesh to be read.</param>
            <param name="outputFilePath">The file path to which to write the output to.</param>
            <param name="assembly">The assembly for which the file is being managed</param>
        </member>
        <member name="M:AbaqusExtension.aIO.#ctor(System.String,AbaqusExtension.aAssembly,System.String)">
            <param name="inputFile">The Abaqus input file for the mesh to be read.</param>
            <param name="assembly">The assembly for which the file is being managed</param>
        </member>
        <member name="P:AbaqusExtension.aIO.Directory">
            <summary>
            Gets or sets directory to write the output file to.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aIO.InputFile">
            <summary>
            Gets or sets abaqus input file holding the mesh.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aIO.OrientationFile">
            <summary>
            Abaqus input file holding the original mesh together with the added info with this program.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aIO.Assembly">
            <summary>
            Gets the full assembly for which the data is written or read.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aIO.RefinedMeshFile">
            <summary>
            Gets or sets the file path for refined mesh data
            </summary>
        </member>
        <member name="P:AbaqusExtension.aIO.GENOAfile">
            <summary>
            Gets or sets the file path for GENOA laminate definition file
            </summary>
        </member>
        <member name="M:AbaqusExtension.aIO.ReadFile">
            <summary>
            Reads the input file
            </summary>
        </member>
        <member name="M:AbaqusExtension.aMath.Solve(System.Double[0:,0:])">
            <summary>Computes the solution of a linear equation system.</summary>
            <param name="M">
            The system of linear equations as an augmented matrix[row, col] where (rows + 1 == cols).
            It will contain the solution in "row canonical form" if the function returns "true".
            </param>
            <returns>Returns whether the matrix has a unique solution or not.</returns>
        </member>
        <member name="P:AbaqusExtension.aNode.IsCostal">
            <summary>
            true if the node is found on the edge of the part
            </summary>
        </member>
        <member name="P:AbaqusExtension.aNode.Flagged">
            <summary>
            Gets or sets a general indicator flag
            </summary>
        </member>
        <member name="M:AbaqusExtension.aNodeSet.#ctor(System.String,System.Boolean,AbaqusExtension.aAssembly)">
            <summary>
            Creates an instance of node set
            </summary>
            <param name="name">The name of the node set</param>
            <param name="isInGenerateMode">Tells if the set is generated automatically</param>
            <param name="assembly">The assembly owning the node set</param>
        </member>
        <member name="P:AbaqusExtension.aNodeSet.Members">
            <summary>
            Gets the members of the node set
            </summary>
        </member>
        <member name="P:AbaqusExtension.aNodeSet.Name">
            <summary>
            Gets or sets the name of the node set
            </summary>
        </member>
        <member name="P:AbaqusExtension.aNodeSet.IsInGenerateMode">
            <summary>
            Gets the sourceValue if the set is accepting members by generating in ranges
            </summary>
        </member>
        <member name="P:AbaqusExtension.aNodeSet.Assembly">
            <summary>
            Gets the assembly to which the node set belongs
            </summary>
        </member>
        <member name="M:AbaqusExtension.aNodeSet.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates node set members by generating the nodes from n1 to n2 with i increment.
            </summary>
            <param name="n1">Start node number</param>
            <param name="n2">End node number</param>
            <param name="i">increment</param>
        </member>
        <member name="M:AbaqusExtension.aNodeSet.Add(System.Int32)">
            <summary>
            Adds a single node with a given ID to the set
            </summary>
            <param name="iD">ID number of the node to be added</param>
        </member>
        <member name="M:AbaqusExtension.aNodeSet.Add(System.Int32,System.Int32)">
            <summary>
            Generates node set members by generating the nodes from n1 to n2 with increment of one
            </summary>
            <param name="n1">Start node number</param>
            <param name="n2">End node number</param>
        </member>
        <member name="M:AbaqusExtension.aNodeSet.RelateToNodeObjects">
            <summary>
            Adds the aNode objects to the members list based on the collected node IDs.
            </summary>
        </member>
        <member name="M:AbaqusExtension.aPoint.Transform(AbaqusExtension.aPoint,AbaqusExtension.aPoint,AbaqusExtension.aPoint,AbaqusExtension.aPoint,System.Boolean)">
            <summary>
            Transforms a point to a cartesian coordinate system given by parameters in the same system.
            </summary>
            <param name="origin">Origin of the new system in coordinates</param>
            <param name="u">A point on the x axis of the new coord. system</param>
            <param name="v">A point on the y axis of the new coord. system</param>
            <param name="P">The point to be transformed.</param>
            <param name="transformBack">If true, the transformation is back to global coords.</param>
        </member>
        <member name="P:AbaqusExtension.aSection.Elset">
            <summary>
            Gets or sets the set of elements having this section
            </summary>
        </member>
        <member name="P:AbaqusExtension.aSection.Orientation">
            <summary>
            Gets or sets the material orientation
            </summary>
        </member>
        <member name="P:AbaqusExtension.aSection.Material">
            <summary>
            Gets or sets the name of the material for the section
            </summary>
        </member>
        <member name="P:AbaqusExtension.aSection.Type">
            <summary>
            Gets or sets the section type
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.Path">
            <summary>
            Gets the collection of 2D curves representing the tow path in a single plane.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.StartOfPath">
            <summary>
            Gets the start point of the path
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.EndOfPath">
            <summary>
            Gets the end point of the path
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.TowWidth">
            <summary>
            Gets the width of the tow
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.TowThickness">
            <summary>
            Gets the thickness of the tow.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.BraidAngle">
            <summary>
            Gets or sets the braiding angle of the tow
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.StartElemNo">
            <summary>
            Gets or sets the lowest element number in the tow
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.EndElemNo">
            <summary>
            Gets or sets the highest element number in the tow
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.Material">
            <summary>
            Gets or sets the name of the material for the tow.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.ID">
            <summary>
            Gets the ID number of this tow in the assembly.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.Sections">
            <summary>
            Gets the collection of segments having their own material and orientation
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.Elsets">
            <summary>
            Gets the collection of element sets in the tow.
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTow.DisplayInRadians">
            <summary>
            Gets or sets the angle unit used for the display in dialoge boxes.
            </summary>
        </member>
        <member name="M:AbaqusExtension.aTow.SetID(System.Int32)">
            <summary>
            Sets the ID number to the given number
            </summary>
            <param name="ID">The new ID number</param>
        </member>
        <member name="P:AbaqusExtension.aTowSection.Ceiling">
            <summary>
            Gets the upper limit curve
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTowSection.Floor">
            <summary>
            Gets the lower limit curve
            </summary>
        </member>
        <member name="P:AbaqusExtension.aTowSection.Rotation">
            <summary>
            Gets the amount of rotation in radians CCW from a line perpendicular to the tow center when viewed from top.
            </summary>
        </member>
        <member name="P:AbaqusExtension.Complex.Re">
            <summary>
            Contains the real part of a complex number.
            </summary>
        </member>
        <member name="P:AbaqusExtension.Complex.Im">
            <summary>
            Contains the imaginary part of a complex number.
            </summary>
        </member>
        <member name="P:AbaqusExtension.Complex.I">
            <summary>
            Imaginary unit.
            </summary>
        </member>
        <member name="P:AbaqusExtension.Complex.Zero">
            <summary>
            Complex number zero.
            </summary>
        </member>
        <member name="P:AbaqusExtension.Complex.One">
            <summary>
            Complex number one.
            </summary>
        </member>
        <member name="M:AbaqusExtension.Complex.#ctor">
            <summary>
            Inits complex number as (0, 0).
            </summary>
        </member>
        <member name="M:AbaqusExtension.Complex.#ctor(System.Double)">
            <summary>
            Inits complex number with imaginary part = 0.
            </summary>
            <param name="real_part"></param>
        </member>
        <member name="M:AbaqusExtension.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Inits complex number.
            </summary>
            <param name="imaginary_part"></param>
            <param name="real_part"></param>
        </member>
        <member name="M:AbaqusExtension.Complex.#ctor(System.String)">
            <summary>
            Inits complex number from string like "a+bi".
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:AbaqusExtension.Complex.Abs(AbaqusExtension.Complex)">
            <summary>
            Calcs the absolute sourceValue of a complex number.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Inv(AbaqusExtension.Complex)">
            <summary>
            Inverts a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Tan(AbaqusExtension.Complex)">
            <summary>
            Tangent of a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Cosh(AbaqusExtension.Complex)">
            <summary>
            Hyperbolic cosine of a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Sinh(AbaqusExtension.Complex)">
            <summary>
            Hyperbolic sine of a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Tanh(AbaqusExtension.Complex)">
            <summary>
            Hyperbolic tangent of a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Coth(AbaqusExtension.Complex)">
            <summary>
            Hyperbolic cotangent of a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Sech(AbaqusExtension.Complex)">
            <summary>
            Hyperbolic secant of a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Csch(AbaqusExtension.Complex)">
            <summary>
            Hyperbolic cosecant of a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Cot(AbaqusExtension.Complex)">
            <summary>
            Cotangent of a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Conj(AbaqusExtension.Complex)">
            <summary>
            Computes the conjugation of a complex number.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Sqrt(System.Double)">
            <summary>
            Complex square root.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Sqrt(AbaqusExtension.Complex)">
            <summary>
            Complex square root.
            </summary>
            <param name="a"></param>
            <returns></returns>   
        </member>
        <member name="M:AbaqusExtension.Complex.Exp(AbaqusExtension.Complex)">
            <summary>
            Complex exponential function.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Log(AbaqusExtension.Complex)">
            <summary>
            Main sourceValue of the complex logarithm.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Arg(AbaqusExtension.Complex)">
            <summary>
            Argument of the complex number.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Cos(AbaqusExtension.Complex)">
            <summary>
            Complex cosine.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Complex.Sin(AbaqusExtension.Complex)">
            <summary>
            Complex sine.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="F:AbaqusExtension.Matrix.Values">
            <summary>
            Contains the rows of the matrix as elements, which
            are ArrayLists as well.
            </summary>
        </member>
        <member name="P:AbaqusExtension.Matrix.RowCount">
            <summary>
            Number of rows of the matrix.
            </summary>
        </member>
        <member name="P:AbaqusExtension.Matrix.ColumnCount">
            <summary>
            Number of columns of the matrix.
            </summary>
        </member>
        <member name="F:AbaqusExtension.Matrix.rowCount">
            <summary>
            Number of rows of the matrix.
            </summary>
        </member>
        <member name="F:AbaqusExtension.Matrix.columnCount">
            <summary>
            Number of columns of the matrix.
            </summary>
        </member>
        <member name="M:AbaqusExtension.Matrix.#ctor">
            <summary>
            Inits empty matrix 
            </summary>
        </member>
        <member name="M:AbaqusExtension.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates m by n matrix filled with zeros; same as Zeros(m, n).
            </summary>
            <param name="m">Number of rows</param>
            <param name="n">Number of columns</param>
        </member>
        <member name="M:AbaqusExtension.Matrix.#ctor(System.Int32)">
            <summary>
            Inits square matrix
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:AbaqusExtension.Matrix.#ctor(AbaqusExtension.Complex)">
            <summary>
            Creates one by one matrix containing x
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:AbaqusExtension.Matrix.#ctor(AbaqusExtension.Complex[0:,0:])">
            <summary>
            Creates matrix from 2-d Complex array.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:AbaqusExtension.Matrix.#ctor(AbaqusExtension.Complex[])">
            <summary>
            Creates column vector from Complex array.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:AbaqusExtension.Matrix.#ctor(System.Double)">
            <summary>
            Creates one by one matrix containing x
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:AbaqusExtension.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Creates matrix from 2-d double array.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:AbaqusExtension.Matrix.#ctor(System.Double[])">
            <summary>
            Creates column vector from double array.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:AbaqusExtension.Matrix.#ctor(System.String)">
            <summary>
            Creates real matrix from string, e.g. "1,0;0,1" gives the 2 by 2 identity matrix.
            Not fast, but easy to use, if matrices are to be entered by hand or read from text files.
            </summary>
            <param name="matrix">Matrix coded as string. Lines are separated by a semicolon, column elements by a comma.</param>
        </member>
        <member name="M:AbaqusExtension.Matrix.E(System.Int32,System.Int32)">
            <summary>
            Retrieves the j-th canoncical basis vector of the IR^n.
            </summary>
            <param name="n">Dimension of the basis.</param>
            <param name="j">Index of canonical basis vector to be retrieved.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.KroneckerDelta(System.Int32,System.Int32)">
            <summary>
            Returns 1 if i = j, and 0 else.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.ChessboardMatrix(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates m by n chessboard matrix with interchangíng ones and zeros.
            
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <param name="even">Indicates, if matrix entry (1,1) equals zero.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.ChessboardMatrix(System.Int32,System.Boolean)">
            <summary>
            Creates m by n chessboard matrix with interchangíng ones and zeros.
            
            </summary>        
            <param name="n">Number of columns.</param>
            <param name="even">Indicates, if matrix entry (1,1) equals zero.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Zeros(System.Int32,System.Int32)">
            <summary>
            Creates m by n matrix filled with zeros.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <returns>m by n matrix filled with zeros.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Zeros(System.Int32)">
            <summary>
            Creates n by n matrix filled with zeros.
            </summary>       
            <param name="n">Number of rows and columns, resp.</param>
            <returns>n by n matrix filled with zeros.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Ones(System.Int32,System.Int32)">
            <summary>
            Creates m by n matrix filled with ones.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <returns>m by n matrix filled with ones.</returns>        
        </member>
        <member name="M:AbaqusExtension.Matrix.Ones(System.Int32)">
            <summary>
            Creates n by n matrix filled with ones.
            </summary>        
            <param name="n">Number of columns.</param>
            <returns>n by n matrix filled with ones.</returns>        
        </member>
        <member name="M:AbaqusExtension.Matrix.Identity(System.Int32)">
            <summary>
            Creates n by n identity matrix.
            </summary>
            <param name="n">Number of rows and columns respectively.</param>
            <returns>n by n identity matrix.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Eye(System.Int32)">
            <summary>
            Creates teh n by n identity matrix.
            </summary>
            <param name="n">Number of rows and columns, resp.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.VerticalConcat(AbaqusExtension.Matrix,AbaqusExtension.Matrix)">
            <summary>
            Vertically concats matrices A and B, which do not have to be of the same height. 
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns>Matrix [A|B]</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Diag(AbaqusExtension.Matrix)">
            <summary>
            Generates diagonal matrix
            </summary>
            <param name="diag_vector">column vector containing the diag elements</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Diag(AbaqusExtension.Matrix,System.Int32)">
            <summary>
            Generates diagonal matrix
            </summary>
            <param name="diag_vector">column vector containing the diag elements</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.TriDiag(AbaqusExtension.Complex,AbaqusExtension.Complex,AbaqusExtension.Complex,System.Int32)">
            <summary>
            Generates tri-diagonal square matrix with constant values on main
            and secondary diagonals.
            </summary>
            <param name="l">Value of lower secondary diagonal.</param>
            <param name="d">Value of main diagonal.</param>
            <param name="u">Value of upper secondary diagonal.</param>
            <param name="n">Dimension of the output matrix.</param>
            <returns>nxn tri-diagonal matrix.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.TriDiag(AbaqusExtension.Matrix,AbaqusExtension.Matrix,AbaqusExtension.Matrix)">
            <summary>
            Generates tri-diagonal square matrix with overloaded vectors
            as main and secondary diagonals. The dimension of the output
            matrix is determined by the length of d.
            </summary>
            <param name="l">Lower secondary diagonal vector.</param>
            <param name="d">Main diagonal vector.</param>
            <param name="u">Upper secondary diagonal vector.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Dot(AbaqusExtension.Matrix,AbaqusExtension.Matrix)">
            <summary>
            Implements the dot product of two vectors.
            </summary>
            <param name="v">Row or column vector.</param>
            <param name="w">Row or column vector.</param>
            <returns>Dot product.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Fib(System.Int32)">
            <summary>
            Calcs the n-th Fibonacci-number in O(n)
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.RandomGraph(System.Int32)">
            <summary>
            Creates n by n matrix filled with random values in [0,1];
            all entries on the main diagonal are zero.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.RandomGraph(System.Int32,System.Double)">
            <summary>
            Creates n by n matrix filled with random values in [0,1];
            all entries on the main diagonal are zero.
            A specified random percentage of edges has weight positive infinity.
            </summary>
            <param name="n"></param>
            <param name="p">Defines probability for an edge being less than +infty. Should be in [0,1],
            p = 1 gives complete directed graph; p = 0 gives no edges.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Random(System.Int32,System.Int32)">
            <summary>
            Creates m by n matrix filled with random values in [0,1].
            </summary>
            <param name="m"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Random(System.Int32)">
            <summary>
            Creates n by n matrix filled with random values in [0,1].
            </summary>
            <param name="m"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Random(System.Int32,System.Int32,System.Int32)">
             <summary>
             Creates n by n matrix filled with random values in {lo,...,hi-1}.
             </summary>
            <param name="lo">Inclusive lower bound.</param>
             <param name="hi">Exclusive upper bound</param>
             <param name="n">Number of rows and columns each.</param>
             <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.RandomZeroOne(System.Int32,System.Int32,System.Double)">
            <summary>
            Creates m by n random zero one matrix with probability p for a one.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <param name="p">Probability fro an entry to be one, expecting a sourceValue in [0,1].</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.RandomZeroOne(System.Int32,System.Double)">
            <summary>
            Creates n by n random zero one matrix with probability p for a one.
            </summary>        
            <param name="n">Number of rows and columns, resp.</param>
            <param name="p">Probability fro an entry to be one, expecting a sourceValue in [0,1].</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Random(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Creates m by n matrix filled with random values in {lo,...,hi-1}.
             </summary>
            <param name="lo">Inclusive lower bound.</param>
             <param name="hi">Exclusive upper bound</param>
             <param name="m">Number of rows.</param>
             <param name="n">Number of columns.</param>
             <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Floyd(AbaqusExtension.Matrix)">
            <summary>
            Computes all shortest distance between any vertices in a given graph.
            </summary>
            <param name="adjacence_matrix">Square adjacence matrix. The main diagonal
            is expected to consist of zeros, any non-existing edges should be marked
            positive infinity.</param>
            <returns>Two matrices D and P, where D[u,v] holds the distance of the shortest
            path between u and v, and P[u,v] holds the shortcut vertex on the way from
            u to v.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.FloydPath(AbaqusExtension.Matrix,System.Int32,System.Int32)">
            <summary>
            Returns the shortest path between two given vertices i and j as
            int array.
            </summary>
            <param name="P">Path matrix as returned from Floyd().</param>
            <param name="i">One-based index of start vertex.</param>
            <param name="j">One-based index of end vertex.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.DFS(AbaqusExtension.Matrix,System.Int32)">
            <summary>
            Performs depth-first search for a graph given by its adjacence matrix.
            </summary>
            <param name="adjacence_matrix">A[i,j] = 0 or +infty, if there is no edge from i to j; any non-zero sourceValue otherwise.</param>
            <param name="root">The vertex to begin the search.</param>
            <returns>Adjacence matrix of the computed spanning tree.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.BFS(AbaqusExtension.Matrix,System.Int32)">
            <summary>
            Performs broad-first search for a graph given by its adjacence matrix.
            </summary>
            <param name="adjacence_matrix">A[i,j] = 0 or +infty, if there is no edge from i to j; any non-zero sourceValue otherwise.</param>
            <param name="root">The vertex to begin the search.</param>
            <returns>Adjacence matrix of the computed spanning tree.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.ZeroOneRandom(System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a random matrix filled with zeros and ones.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <param name="p">Probability of each entry being 1.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.ZeroOneRandom(System.Int32,System.Double)">
            <summary>
            Creates a random matrix filled with zeros and ones.
            </summary>        
            <param name="n">Number of rows and columns.</param>
            <param name="p">Probability of each entry being 1.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.HouseholderVector(AbaqusExtension.Matrix)">
            <summary>
            Computes the Householder vector.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.BlockMatrix(AbaqusExtension.Matrix,AbaqusExtension.Matrix,AbaqusExtension.Matrix,AbaqusExtension.Matrix)">
            <summary>
            Constructs block matrix [A, B; C, D].
            </summary>
            <param name="A">Upper left sub matrix.</param>
            <param name="B">Upper right sub matrix.</param>
            <param name="C">Lower left sub matrix.</param>
            <param name="D">Lower right sub matrix.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Solve(AbaqusExtension.Matrix,AbaqusExtension.Matrix)">
            <summary>
            For this matrix A, this method solves Ax = b via LU factorization with
            column pivoting.
            </summary>
            <param name="b">Vector of appropriate length.</param>
            <remarks>Approximately n^3/3 + 2n^2 dot operations ~> O(n^3)</remarks>
        </member>
        <member name="M:AbaqusExtension.Matrix.Re">
            <summary>
            Returns the matrix of the real parts of the entries of this matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Im">
            <summary>
            Returns the matrix of the imaginary parts of the entries of this matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.HessenbergHouseholder">
            <summary>
            Performs Hessenberg-Householder reduction, where {H, Q}
            is returned, with H Hessenbergian, Q orthogonal and H = Q'AQ.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Extract(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extract sub matrix.
            </summary>
            <param name="i1">Start row.</param>
            <param name="i2">End row.</param>
            <param name="j1">Start column.</param>
            <param name="j2">End column.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.ExtractLowerTrapeze">
            <summary>
            Extracts lower trapeze matrix of this matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.ExtractUpperTrapeze">
            <summary>
            Extracts upper trapeze matrix of this matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.ColumnVectorize">
            <summary>
            Splits matrix into its column vectors.
            </summary>
            <returns>Array of column vectors.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.RowVectorize">
            <summary>
            Splits matrix into its row vectors.
            </summary>
            <returns>Array of row vectors.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.VerticalFlip">
            <summary>
            Flips matrix vertically.
            </summary>
        </member>
        <member name="M:AbaqusExtension.Matrix.HorizontalFlip">
            <summary>
            Flips matrix horizontally.
            </summary>
        </member>
        <member name="M:AbaqusExtension.Matrix.SwapColumns(System.Int32,System.Int32)">
            <summary>
            Swaps columns at specified indices. The latter do not have to be ordered.
            When equal, nothing is done.
            </summary>
            <param name="j1">One-based index of first col.</param>
            <param name="j2">One-based index of second col.</param>       
        </member>
        <member name="M:AbaqusExtension.Matrix.SwapRows(System.Int32,System.Int32)">
            <summary>
            Swaps rows at specified indices. The latter do not have to be ordered.
            When equal, nothing is done.
            </summary>
            <param name="i1">One-based index of first row.</param>
            <param name="i2">One-based index of second row.</param>        
        </member>
        <member name="M:AbaqusExtension.Matrix.DeleteRow(System.Int32)">
            <summary>
            Deletes row at specifies index.
            </summary>
            <param name="i">One-based index at which to delete.</param>
        </member>
        <member name="M:AbaqusExtension.Matrix.DeleteColumn(System.Int32)">
            <summary>
            Deletes column at specifies index.
            </summary>
            <param name="j">One-based index at which to delete.</param>
        </member>
        <member name="M:AbaqusExtension.Matrix.ExtractRow(System.Int32)">
            <summary>
            Retrieves row vector at specfifed index and deletes it from matrix.
            </summary>
            <param name="i">One-based index at which to extract.</param>
            <returns>Row vector.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.ExtractColumn(System.Int32)">
            <summary>
            Retrieves column vector at specfifed index and deletes it from matrix.
            </summary>
            <param name="j">One-based index at which to extract.</param>
            <returns>Row vector.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.InsertRow(AbaqusExtension.Matrix,System.Int32)">
            <summary>
            Inserts row at specified index.
            </summary>
            <param name="row">Vector to insert</param>
            <param name="i">One-based index at which to insert</param>
        </member>
        <member name="M:AbaqusExtension.Matrix.Insert(System.Int32,System.Int32,AbaqusExtension.Matrix)">
            <summary>
            Inserts a sub matrix M at row i and column j.
            </summary>
            <param name="i">One-based row number to insert.</param>
            <param name="j">One-based column number to insert.</param>
            <param name="M">Sub matrix to insert.</param>
        </member>
        <member name="M:AbaqusExtension.Matrix.InsertColumn(AbaqusExtension.Matrix,System.Int32)">
            <summary>
            Inserts column at specified index.
            </summary>
            <param name="col">Vector to insert</param>
            <param name="j">One-based index at which to insert</param>
        </member>
        <member name="M:AbaqusExtension.Matrix.Inverse">
            <summary>
            Inverts square matrix as long as det != 0.
            </summary>
            <returns>Inverse of matrix.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.InverseLeverrier">
            <summary>
            Alternative matrix inversion using Leverrier's formula
            </summary>
            <returns>Inverse of matrix.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Minor(System.Int32,System.Int32)">
            <summary>
            Calcs the matrix that results in the clearing of a
            specified row and a specified column
            </summary>        
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Clone">
            <summary>
            Provides a shallow copy of this matrix in O(m).
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.DiagVector">
            <summary>
            Extracts main diagonal vector of the matrix as a column vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Column(System.Int32)">
            <summary>
            Retrieves column with one-based index j.
            </summary>
            <param name="j"></param>
            <returns>j-th column...</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Row(System.Int32)">
            <summary>
            Retrieves row with one-based index i.
            </summary>
            <param name="i"></param>
            <returns>i-th row...</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Transpose">
            <summary>
            Swaps each matrix entry A[i, j] with A[j, i].
            </summary>
            <returns>A transposed matrix.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Conjugate">
            <summary>
            Replaces each matrix entry z = x + iy with x - iy.
            </summary>
            <returns>Conjugated matrix.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.ConjTranspose">
            <summary>
            Conjuagtes and transposes a matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.LU">
            <summary>
            Performs LU-decomposition of this instance and saves L and U
            within, where the diagonal elements belong to U
            (the ones of L are ones...)
            </summary>
        </member>
        <member name="M:AbaqusExtension.Matrix.LUSafe">
            <summary>
            Performs safe LU-decomposition of this instance with column pivoting 
            and saves L and U
            within, where the diagonal elements belong to U
            (the ones of L are ones...)
            </summary>
            <returns>Permutation matrix P with P*this = L*U</returns>
            <remarks>This needs additional time O(n^2).</remarks>
        </member>
        <member name="M:AbaqusExtension.Matrix.Cholesky">
            <summary>
            Performs Cholesky decomposition of square, symmetric and positive definite
            matrix A = LL', where L is a lower triangular matrix. L is saved in the
            lower triangular part of A.</summary>
            <remarks>
            The diagonal elements can be retrieved
            by a_{11} = h_{11}^2, a_{ii} = h_{ii}^2 + \sum_{k=1}^{i-1}h_{ik}^2 (i = 2..n).
            Use CholeskyUndo() for convenience.
            WARNING: Cholesky decomposition only works for symmetric positive definite matrices!
            </remarks>        
        </member>
        <member name="M:AbaqusExtension.Matrix.CholeskyUndo">
            <summary>
            Since the cholesky decomposition is saved within the symmetric matrix to be
            decomposited, it can be undone to restore the initial matrix.
            </summary>
        </member>
        <member name="M:AbaqusExtension.Matrix.ForwardInsertion(AbaqusExtension.Matrix)">
            <summary>
            Performs forward insertion for regular lower triangular matrix
            and right side b, such that the solution is saved right within b.
            The matrix is not changed.
            </summary>
            <param name="b">Vector of height n, if matrix is n by n.</param>
        </member>
        <member name="M:AbaqusExtension.Matrix.BackwardInsertion(AbaqusExtension.Matrix)">
            <summary>
            Performs backward insertion for regular upper triangular matrix
            and right side b, such that the solution is saved right within b.
            The matrix is not changed.
            </summary>
            <param name="b">Vector of height n, if matrix is n by n.</param>
        </member>
        <member name="M:AbaqusExtension.Matrix.SymmetrizeDown">
            <summary>
            Makes square matrix symmetric by copying the upper half to the lower half.
            </summary>
        </member>
        <member name="M:AbaqusExtension.Matrix.SymmetrizeUp">
            <summary>
            Makes square matrix symmetric by copying the lower half to the upper half.
            </summary>
        </member>
        <member name="M:AbaqusExtension.Matrix.QRGramSchmidt">
            <summary>
            Gram-Schmidtian orthogonalization of an m by n matrix A, such that
            {Q, R} is returned, where A = QR, Q is m by n and orthogonal, R is
            n by n and upper triangular matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Eigenvalues">
            <summary>
            Computes approximates of the eigenvalues of this matrix. WARNING: Computation
            uses basic QR iteration with Gram-Schmidtian orthogonalization. This implies that
            (1) only real matrices can be examined; (2) if the matrix has a multiple eigenvalue
            or complex eigenvalues, partial junk is returned. This is due to the eigenvalues having
            to be like |L1| > |L2| > ... > |Ln| for QR iteration to work properly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Eigenvector(AbaqusExtension.Complex)">
            <summary>
            Computes eigenvector from eigenvalue.
            </summary>
            <param name="eigenvalue"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.SolveCG(AbaqusExtension.Matrix)">
            <summary>
            Solves equation this*x = b via conjugate gradient method.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.QRIterationBasic(System.Int32)">
            <summary>
            Executes the QR iteration.
            </summary>
            <param name="max_iterations"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.QRIterationHessenberg(System.Int32)">
            <summary>
            QR iteration using Hessenberg-Householder reduction.
            </summary>
            <param name="max_iterations"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.QRGivens">
            <summary>
            QR factorization avec Givens rotations.
            </summary>
            <param name="H"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.GivProd(AbaqusExtension.Matrix,AbaqusExtension.Matrix,System.Int32)">
            <summary>
            Givens product. Internal use for QRGivens.
            </summary>
            <param name="c"></param>
            <param name="s"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Garow(AbaqusExtension.Complex,AbaqusExtension.Complex,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Product G(i,k,theta)'*this. Internal use for QRGivens.
            </summary>
            <param name="c"></param>
            <param name="s"></param>
            <param name="i"></param>
            <param name="k"></param>
            <param name="j1"></param>
            <param name="j2"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Gacol(AbaqusExtension.Complex,AbaqusExtension.Complex,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Product M*G(i,k,theta). Internal use for QRGivens.
            </summary>
            <param name="c"></param>
            <param name="s"></param>
            <param name="j1"></param>
            <param name="j2"></param>
            <param name="i"></param>
            <param name="k"></param>
        </member>
        <member name="M:AbaqusExtension.Matrix.GivensCS(AbaqusExtension.Complex,AbaqusExtension.Complex)">
            <summary>
            Computes Givesn sine and cosine.
            </summary>
            <param name="xi"></param>
            <param name="xk"></param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Determinant">
            <summary>
            Calcs determinant of square matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Permanent">
            <summary>
            Computes the permanent of the current instance. WARNING: This algorithm has exponential runtime.
            Don't use for any but very small instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.GetMinRow">
            <summary>
            Finds index of row with minimal AbsRowSum.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.GetMinColumn">
            <summary>
            Finds index of column with minimal AbsColumnSum.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Signum">
            <summary>
            Computes signum of a permutation matrix, which is 1 for an even
            number of swaps and -1 for an odd number of swaps. WARNING: 
            if *this is not a permutation matrix (e.i. a permutation of Id),
            garbage is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Condition">
            <summary>
             Calcs condition number with respect to inversion
            by using |A|*|inv(A)| and 1-Norm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Condition(System.Int32)">
            <summary>
             Calcs condition number with respect to inversion
            by using |A|*|inv(A)| and p norm.
            </summary>
            <param name="p">Specifies the norm to be used. Can be one or positive infinity.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.ConditionFro">
            <summary>
             Calcs condition number with respect to inversion
            by using |A|*|inv(A)| and frobenius norm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.PNorm(System.Double)">
            <summary>
            Calcs p-norm of given matrix: p-th root of the sum
            of the p-th powers of the absolute values of all matrix entries.
            </summary>
            <param name="p">Which norm to compute; can be positive infinity.</param>
            <returns></returns>
            <remarks>If p not in {i, +infty}, *this must be a vector.</remarks>
        </member>
        <member name="M:AbaqusExtension.Matrix.Norm">
            <summary>
            2-Norm for vectors. If *this is a matrix, you might want to choose
            FrobeniusNorm().
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.FrobeniusNorm">
            <summary>
            Frobenius norm of a square matrix. If *this is a vector, this method
            is equivalent to Norm() and PNorm(2).
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.TaxiNorm">
            <summary>
            Also known as column-sum norm.
            </summary>
            <returns>Maximal AbsColumnSum</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.MaxNorm">
            <summary>
            Also known as row-sum norm.
            </summary>
            <returns>Maximal AbsRowSum</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.ColumnSum(System.Int32)">
            <summary>
            Calcs sum of the elements of a certain col.
            </summary>
            <param name="i">One-based index of the col to consider.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.AbsColumnSum(System.Int32)">
            <summary>
            Calcs sum of the absolute values of the elements of a certain col.
            </summary>
            <param name="i">One-based index of the col to consider.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.RowSum(System.Int32)">
            <summary>
            Calcs sum of the elements of a certain row.
            </summary>
            <param name="i">One-based index of the row to consider.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.AbsRowSum(System.Int32)">
            <summary>
            Calcs sum of the absolute values of the elements of a certain row.
            </summary>
            <param name="i">One-based index of the row to consider.</param>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.DiagProd">
            <summary>
            Computes product of main diagonal entries.
            </summary>
            <returns>Product of diagonal elements</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Trace">
            <summary>
            Calcs trace of the matrix.
            </summary>
            <returns>Sum of diagonal elements.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsNormal">
            <summary>
            Matrix is normal, iff A*A^H = A^H*A, where A is the conjugated transposed of A.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsUnitary">
            <summary>
            Matrix is unitary, iff A^H*A = id, where A^H is the conjugated transpose of A.
            </summary>
            <returns>True iff matrix is unitary.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsHermitian">
            <summary>
            Matrix A is Hermitian iff A^H = A, where A^H is the conjugated transposed of A.
            </summary>
            <returns>True iff matrix is Hermitian.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsReal">
            <summary>
            Checks if matrix consists only of real entries.
            </summary>
            <returns>True iff all entries are real.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsSymmetricPositiveDefinite">
            <summary>
            Checks for symmetric positive definiteness.
            </summary>
            <returns>True iff matrix is symmetrix positive definite.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsSPD">
            <summary>
            Checks for symmetric positive definiteness.
            </summary>
            <returns>True iff matrix is symmetrix positive definite.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.Definiteness">
            <summary>
            Finds out the type of definiteness of a symmetric square matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.HasZeroRowOrColumn">
            <summary>
            Checks if matrix has a row or column consisting of zeros.
            </summary>
            <returns>True iff so.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsZeroOneMatrix">
            <summary>
            Checks if matrix consists only of zeros and ones.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsPermutation">
            <summary>
            Checks if matrix is permutation of the identity matrix.
            </summary>
            <returns>True iff matrix is permutation matrix.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsDiagonal">
            <summary>
            Checks if matrix is diagonal matrix.
            </summary>
            <returns>True iff matrix is diagonal.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.VectorLength">
            <summary>
            Checks if matrix is n by one or one by n.
            </summary>
            <returns>Length, if vector; zero else.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsSquare">
            <summary>
            Checks if number of rows equals number of columns.
            </summary>
            <returns>True iff matrix is n by n.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsInvolutary">
            <summary>
            Checks if matrix is involutary, e.i. if A*A = id.
            </summary>
            <returns>True iff matrix is involutary.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsSymmetric">
            <summary>
            Checks if A[i, j] == A[j, i].
            </summary>
            <returns>True iff matrix is symmetric.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsOrthogonal">
            <summary>
            Checks for orthogonality by testing if A*A' == id.
            </summary>
            <returns>True iff matrix is orthogonal.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsTrapeze">
            <summary>
            Checks if matrix is lower or upper trapeze.
            </summary>
            <returns>True iff matrix is trapeze.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsTriangular">
            <summary>
            Checks if matrix is trapeze and square.
            </summary>
            <returns>True iff matrix is triangular.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsUpperTriangular">
            <summary>
            Checks if matrix is square and upper trapeze.
            </summary>
            <returns>True iff matrix is upper triangular.</returns>
        </member>
        <member name="M:AbaqusExtension.Matrix.IsLowerTriangular">
            <summary>
            Checks if matrix is square and lower trapeze.
            </summary>
            <returns>True iff matrix is lower triangular.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AbaqusExtension.Matrix.IsUpperTrapeze" -->
        <member name="M:AbaqusExtension.Matrix.IsLowerTrapeze">
            <summary>
            Checks if A[i, j] == 0 for i > j.
            </summary>
            <returns>True iff matrix is lower trapeze.</returns>
        </member>
        <member name="P:AbaqusExtension.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Access the component in row i, column j of a non-empty matrix.
            </summary>
            <param name="i">One-based row index.</param>
            <param name="j">One-based column index.</param>
            <returns></returns>
        </member>
        <member name="P:AbaqusExtension.Matrix.Item(System.Int32)">
            <summary>
            Access to the i-th component of an n by one matrix (column vector)
            or one by n matrix (row vector).
            </summary>
            <param name="i">One-based index.</param>
            <returns></returns>
        </member>
    </members>
</doc>
